name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        # Set Django settings module
        export DJANGO_SETTINGS_MODULE=django_api.settings
        # Ki·ªÉm tra import Django
        python -c "import django; print(f'Django version: {django.get_version()}')"
        # Ki·ªÉm tra import Django API
        python -c "import django_api; print('Django API imports successfully')"
        # Check Django configuration
        python manage.py check

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main'
    permissions:
      contents: write
    
    steps:
    - name: Checkout manifests repo
      uses: actions/checkout@v4
      with:
        repository: QuanMBL4255142/Repository_B_CI_CD_FPT_repoB_Devops
        # l√µi n·∫±m setting secrets and variable/ action
        token: ${{ secrets.PAT_TOKEN }}
        path: manifests
        
    - name: Update image tag
      run: |
        cd manifests
        echo "Current directory: $(pwd)"
        echo "Files in manifests:"
        ls -la
        
        # Ki·ªÉm tra file deployment.yaml c√≥ t·ªìn t·∫°i kh√¥ng
        if [ ! -f "k8s/deployment.yaml" ]; then
          echo "Error: k8s/deployment.yaml not found!"
          exit 1
        fi
        
        echo "Before update:"
        grep "image:" k8s/deployment.yaml
        
        # C·∫≠p nh·∫≠t tag image trong deployment.yaml
        sed -i "s|image: ghcr.io/.*/repository_a_ci_cd_fpt_repob_code:.*|image: ghcr.io/quanmbl4255142/repository_a_ci_cd_fpt_repob_code:latest|g" k8s/deployment.yaml
        
        echo "After update:"
        grep "image:" k8s/deployment.yaml
        
        # Th√™m timestamp annotation v√†o pod template ƒë·ªÉ force restart pods
        TIMESTAMP=$(date +%s)
        echo "Adding timestamp to pod template: $TIMESTAMP"
        
        # Update timestamp trong pod template annotations
        # T√¨m d√≤ng c√≥ "timestamp:" v√† replace b·∫±ng timestamp m·ªõi
        sed -i "/^        timestamp:/c\        timestamp: \"$TIMESTAMP\"" k8s/deployment.yaml
        
        # Ki·ªÉm tra timestamp ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        echo "Updated timestamp in pod template:"
        grep "timestamp:" k8s/deployment.yaml
        
    - name: Commit and push changes
      run: |
        cd manifests
        echo "Current directory: $(pwd)"
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check git status
        echo "Git status:"
        git status
        
        # Add changes
        git add k8s/deployment.yaml
        
        # Check what's staged
        echo "Staged changes:"
        git diff --cached
        
        # Commit changes
        git commit -m "chore: update image to latest [skip ci]" || echo "No changes to commit"
        
        # Set remote URL with Personal Access Token
        git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/QuanMBL4255142/Repository_B_CI_CD_FPT_repoB_Devops.git
        
        # Push changes
        git push origin main
        
    - name: Setup Kubernetes config
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl
      run: |
        # T·∫°o kubeconfig directory
        mkdir -p ~/.kube
        
        # Ki·ªÉm tra KUBE_CONFIG_DATA secret c√≥ t·ªìn t·∫°i kh√¥ng
        if [ -z "${{ secrets.KUBE_CONFIG_DATA }}" ]; then
          echo "‚ùå KUBE_CONFIG_DATA secret is not configured!"
          echo "Please add KUBE_CONFIG_DATA secret to repository settings."
          exit 1
        fi
        
        # T·∫°o kubeconfig t·ª´ GitHub secrets - th·ª≠ raw content tr∆∞·ªõc
        echo "${{ secrets.KUBE_CONFIG_DATA }}" > ~/.kube/config
        
        # Verify kubectl connection
        echo "üîç Verifying kubectl connection..."
        kubectl version --client
        if kubectl cluster-info; then
          echo "‚úÖ Successfully connected to Kubernetes cluster"
        else
          echo "‚ùå Cannot connect to cluster - check KUBE_CONFIG_DATA secret"
          exit 1
        fi
        
    - name: Force ArgoCD Sync and Delete Old Pods
      run: |
        echo "üöÄ Forcing ArgoCD sync and deleting old pods..."
        
        # Wait for git push to complete
        echo "‚è≥ Waiting for git push to complete..."
        sleep 15
        
        # Verify cluster connection before proceeding
        echo "üîç Verifying cluster connection..."
        if ! kubectl cluster-info > /dev/null 2>&1; then
          echo "‚ùå Cannot connect to Kubernetes cluster. Skipping ArgoCD operations."
          echo "Please check KUBE_CONFIG_DATA secret configuration."
          exit 1
        fi
        echo "‚úÖ Cluster connection verified"
        
        # Check if ArgoCD application exists
        echo "üîç Checking ArgoCD application..."
        if ! kubectl get application django-api-app -n argocd-new > /dev/null 2>&1; then
          echo "‚ö†Ô∏è ArgoCD application 'django-api-app' not found in namespace 'argocd-new'"
          echo "Available applications:"
          kubectl get applications -A | grep django || echo "No django applications found"
          echo "‚ö†Ô∏è Skipping ArgoCD operations, will only restart deployment"
        else
          echo "‚úÖ ArgoCD application found"
          
          # Method 1: Force delete old pods first
          echo "üóëÔ∏è Force deleting old pods..."
          kubectl delete pods -l app=django-api -n django-api --force --grace-period=0 || echo "‚ö†Ô∏è No old pods to delete"
          
          # Method 2: Force refresh ArgoCD application
          echo "üîÑ Force refreshing ArgoCD application..."
          kubectl patch application django-api-app -n argocd-new \
            --type merge \
            --patch '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}' || echo "‚ö†Ô∏è kubectl patch failed"
          
          # Method 3: Trigger sync with force strategy
          echo "‚ö° Triggering force sync..."
          kubectl patch application django-api-app -n argocd-new \
            --type merge \
            --patch '{"operation":{"initiatedBy":{"username":"github-actions"},"sync":{"syncStrategy":{"force":true}}}}' || echo "‚ö†Ô∏è Force sync failed"
        fi
        
        # Method 4: Restart deployment to force new pods
        echo "üîÑ Restarting deployment..."
        if kubectl rollout restart deployment django-api -n django-api; then
          echo "‚úÖ Deployment restart initiated"
        else
          echo "‚ö†Ô∏è Deployment restart failed - deployment may not exist"
          exit 1
        fi
        
        # Method 5: Wait and verify pods
        echo "‚è≥ Waiting for new pods to be ready..."
        kubectl rollout status deployment django-api -n django-api --timeout=120s || echo "‚ö†Ô∏è Timeout waiting for rollout"
        
        # Method 6: Verify old pods are gone
        echo "‚úÖ Verifying old pods cleanup..."
        kubectl get pods -l app=django-api -n django-api
        
        echo ""
        echo "‚úÖ ArgoCD sync and pod cleanup completed!"
        echo "‚è∞ Timestamp updated: $(date)"
        echo "üîÑ New pods should be running with latest image"
        echo "üìä Monitor with: kubectl get pods -n django-api"