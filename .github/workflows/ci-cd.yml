name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]
  workflow_dispatch: # Cho ph√©p ch·∫°y th·ªß c√¥ng

env:
  REGISTRY: ghcr.io
  IMAGE_NAME: ${{ github.repository }}

jobs:
  test:
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: '3.11'
        
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        pip install pytest pytest-cov
        
    - name: Run tests
      run: |
        # Set Django settings module
        export DJANGO_SETTINGS_MODULE=django_api.settings
        # Ki·ªÉm tra import Django
        python -c "import django; print(f'Django version: {django.get_version()}')"
        # Ki·ªÉm tra import Django API
        python -c "import django_api; print('Django API imports successfully')"
        # Check Django configuration
        python manage.py check

  build-and-push:
    needs: test
    runs-on: ubuntu-latest
    permissions:
      contents: read
      packages: write
      id-token: write
      
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
      
    - name: Set up Docker Buildx
      uses: docker/setup-buildx-action@v3
      
    - name: Log in to Container Registry
      uses: docker/login-action@v3
      with:
        registry: ${{ env.REGISTRY }}
        username: ${{ github.actor }}
        password: ${{ secrets.GITHUB_TOKEN }}
        
    - name: Extract metadata
      id: meta
      uses: docker/metadata-action@v5
      with:
        images: ${{ env.REGISTRY }}/${{ env.IMAGE_NAME }}
        tags: |
          type=ref,event=branch
          type=ref,event=pr
          type=sha,prefix={{branch}}-
          type=raw,value=latest,enable={{is_default_branch}}
          
    - name: Build and push Docker image
      uses: docker/build-push-action@v5
      with:
        context: .
        platforms: linux/amd64,linux/arm64
        push: true
        tags: ${{ steps.meta.outputs.tags }}
        labels: ${{ steps.meta.outputs.labels }}
        cache-from: type=gha
        cache-to: type=gha,mode=max

  update-manifests:
    needs: build-and-push
    runs-on: ubuntu-latest
    if: github.ref == 'refs/heads/main' || github.ref == 'refs/heads/develop'
    permissions:
      contents: write
    
    steps:
    - name: Checkout manifests repo
      uses: actions/checkout@v4
      with:
        repository: quanmbl4255142/repository_b_ci_cd_fpt_repob_devops
        # l√µi n·∫±m setting secrets and variable/ action
        token: ${{ secrets.PAT_TOKEN }}
        path: manifests
        
    - name: Update image tag
      run: |
        cd manifests
        echo "Current directory: $(pwd)"
        echo "Files in manifests:"
        ls -la
        
        # X√°c ƒë·ªãnh environment v√† path t∆∞∆°ng ·ª©ng
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        if [ "$BRANCH_NAME" == "main" ]; then
          DEPLOY_PATH="apps/django-api"
          ENVIRONMENT="production"
        else
          DEPLOY_PATH="apps/django-api-staging"
          ENVIRONMENT="staging"
        fi
        
        echo "Branch: $BRANCH_NAME"
        echo "Environment: $ENVIRONMENT"
        echo "Deploy path: $DEPLOY_PATH"
        
        # Ki·ªÉm tra file deployment.yaml c√≥ t·ªìn t·∫°i kh√¥ng
        if [ ! -f "${DEPLOY_PATH}/deployment.yaml" ]; then
          echo "Error: ${DEPLOY_PATH}/deployment.yaml not found!"
          exit 1
        fi
        
        echo "Before update:"
        grep "image:" ${DEPLOY_PATH}/deployment.yaml
        
        # Convert IMAGE_NAME sang lowercase ƒë·ªÉ kh·ªõp v·ªõi GHCR
        IMAGE_NAME_LOWER=$(echo "${{ env.IMAGE_NAME }}" | tr '[:upper:]' '[:lower:]')
        
        # T·∫°o immutable tag v·ªõi SHA (7 k√Ω t·ª± ƒë·∫ßu)
        SHA_SHORT="${GITHUB_SHA:0:7}"
        NEW_TAG="${BRANCH_NAME}-${SHA_SHORT}"
        NEW_IMAGE="${{ env.REGISTRY }}/${IMAGE_NAME_LOWER}:${NEW_TAG}"
        
        echo "Commit SHA: $GITHUB_SHA"
        echo "Short SHA: $SHA_SHORT"
        echo "New tag: $NEW_TAG"
        echo "New image: $NEW_IMAGE"
        
        # Replace ch√≠nh x√°c image line
        sed -i "s|image: ghcr.io/[^:]*:[^[:space:]]*|image: ${NEW_IMAGE}|g" ${DEPLOY_PATH}/deployment.yaml
        
        echo "After update:"
        grep "image:" ${DEPLOY_PATH}/deployment.yaml
        
        # Th√™m timestamp annotation v√†o pod template ƒë·ªÉ force restart pods
        TIMESTAMP=$(date +%s)
        echo "Adding timestamp to pod template: $TIMESTAMP"
        
        # Update timestamp trong pod template annotations
        # T√¨m d√≤ng c√≥ "timestamp:" v√† replace b·∫±ng timestamp m·ªõi
        sed -i "/^        timestamp:/c\        timestamp: \"$TIMESTAMP\"" ${DEPLOY_PATH}/deployment.yaml
        
        # Ki·ªÉm tra timestamp ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t
        echo "Updated timestamp in pod template:"
        grep "timestamp:" ${DEPLOY_PATH}/deployment.yaml
        
    - name: Commit and push changes
      run: |
        cd manifests
        echo "Current directory: $(pwd)"
        
        # X√°c ƒë·ªãnh environment v√† path
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        SHA_SHORT="${GITHUB_SHA:0:7}"
        if [ "$BRANCH_NAME" == "main" ]; then
          DEPLOY_PATH="apps/django-api"
          ENVIRONMENT="production"
        else
          DEPLOY_PATH="apps/django-api-staging"
          ENVIRONMENT="staging"
        fi
        
        # Configure git
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        
        # Check git status
        echo "Git status:"
        git status
        
        # Add changes
        git add ${DEPLOY_PATH}/deployment.yaml
        
        # Check what's staged
        echo "Staged changes:"
        git diff --cached
        
        # Commit changes with SHA tag and environment
        git commit -m "chore(${ENVIRONMENT}): update image to ${BRANCH_NAME}-${SHA_SHORT} [skip ci]" || echo "No changes to commit"
        
        # Set remote URL with Personal Access Token
        git remote set-url origin https://${{ secrets.PAT_TOKEN }}@github.com/quanmbl4255142/repository_b_ci_cd_fpt_repob_devops.git
        
        # Push changes
        git push origin main
        
    - name: Setup Kubernetes config
      uses: azure/setup-kubectl@v3
      with:
        version: 'latest'
        
    - name: Configure kubectl and trigger ArgoCD
      run: |
        # T·∫°o kubeconfig directory
        mkdir -p ~/.kube
        
        # Ki·ªÉm tra KUBE_CONFIG_DATA secret c√≥ t·ªìn t·∫°i kh√¥ng
        if [ -z "${{ secrets.KUBE_CONFIG_DATA }}" ]; then
          echo "‚ùå KUBE_CONFIG_DATA secret is not configured!"
          echo "‚ö†Ô∏è ArgoCD sync will not be triggered automatically"
          echo "Please manually sync ArgoCD application or add KUBE_CONFIG_DATA secret"
          exit 0
        fi
        
        # T·∫°o kubeconfig t·ª´ GitHub secrets
        echo "${{ secrets.KUBE_CONFIG_DATA }}" > ~/.kube/config
        
        # Verify kubectl connection
        echo "üîç Verifying kubectl connection..."
        kubectl version --client
        if kubectl cluster-info; then
          echo "‚úÖ Successfully connected to Kubernetes cluster"
        else
          echo "‚ùå Cannot connect to cluster - ArgoCD sync will not be triggered"
          exit 0
        fi
        
        # X√°c ƒë·ªãnh ArgoCD app name theo branch
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        if [ "$BRANCH_NAME" == "main" ]; then
          ARGOCD_APP="django-api-app"
        else
          ARGOCD_APP="django-api-staging-app"
        fi
        
        echo "ArgoCD Application: $ARGOCD_APP"
        
        # Wait for git push to complete
        echo "‚è≥ Waiting for git push to complete..."
        sleep 15
        
        # Trigger ArgoCD sync
        echo "üîÑ Triggering ArgoCD sync for $ARGOCD_APP..."
        kubectl patch application $ARGOCD_APP -n argocd-new \
          --type merge \
          --patch '{"metadata":{"annotations":{"argocd.argoproj.io/refresh":"hard"}}}' || echo "‚ö†Ô∏è ArgoCD app not found or sync failed"
        
        # Alternative: Trigger sync via ArgoCD CLI
        echo "‚ö° Alternative sync method..."
        kubectl patch application $ARGOCD_APP -n argocd-new \
          --type merge \
          --patch '{"operation":{"initiatedBy":{"username":"github-actions"},"sync":{"syncStrategy":{"force":true}}}}' || echo "‚ö†Ô∏è Force sync failed"
        
        echo "‚úÖ ArgoCD sync triggered successfully for $ARGOCD_APP!"
        
    - name: Notify Deployment Completion
      run: |
        SHA_SHORT="${GITHUB_SHA:0:7}"
        BRANCH_NAME="${GITHUB_REF#refs/heads/}"
        IMAGE_TAG="${BRANCH_NAME}-${SHA_SHORT}"
        
        if [ "$BRANCH_NAME" == "main" ]; then
          ENVIRONMENT="üöÄ PRODUCTION"
          NAMESPACE="django-api"
          APP_NAME="django-api-app"
        else
          ENVIRONMENT="üß™ STAGING"
          NAMESPACE="django-api-staging"
          APP_NAME="django-api-staging-app"
        fi
        
        echo "‚úÖ CI/CD Pipeline completed successfully!"
        echo ""
        echo "üåç Environment: $ENVIRONMENT"
        echo "üì¶ Docker image: ghcr.io/${{ github.repository }}:${IMAGE_TAG}"
        echo "üîñ Image tag: ${IMAGE_TAG} (immutable)"
        echo "üìù Manifests updated in Repository_B"
        echo "üîÑ ArgoCD sync triggered"
        echo ""
        echo "üìä Monitor deployment:"
        echo "  - ArgoCD UI: Check application sync status"
        echo "  - Kubernetes: kubectl get pods -n ${NAMESPACE}"
        echo "  - Application: Check if new pods are running with image tag ${IMAGE_TAG}"
        echo ""
        echo "üîç Debug info:"
        echo "  - Branch: ${BRANCH_NAME}"
        echo "  - Commit: ${GITHUB_SHA}"
        echo "  - Namespace: ${NAMESPACE}"
        echo "  - ArgoCD App: ${APP_NAME}"
        echo ""
        echo "‚è∞ Deployment initiated at: $(date)"